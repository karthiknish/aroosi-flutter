name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: flutter-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_CHANNEL: stable
  FLUTTER_VERSION: '3.35.4'
  GOOGLESERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLESERVICE_INFO_PLIST_BASE64 }}
  ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
  ASC_API_KEY_ISSUER_ID: ${{ secrets.ASC_API_KEY_ISSUER_ID }}
  ASC_API_KEY_P8_BASE64: ${{ secrets.ASC_API_KEY_P8_BASE64 }}

jobs:
  quality:
    name: Flutter Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Create CI .env
        run: |
          cat <<'EOF' > .env
          ENVIRONMENT=staging
          API_BASE_URL=https://staging.aroosi.app/api
          FIREBASE_STORAGE_BUCKET=
          GOOGLE_WEB_CLIENT_ID=
          GOOGLE_IOS_CLIENT_ID=
          GOOGLE_ANDROID_CLIENT_ID=
          EOF

      - name: Cache pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests, analyze, and format check
        run: |
          flutter test
          flutter analyze --no-fatal-warnings --no-fatal-infos
          dart format --set-exit-if-changed .

  build-android:
    name: Build Android APK
    needs: quality
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Create CI .env
        run: |
          cat <<'EOF' > .env
          ENVIRONMENT=staging
          API_BASE_URL=https://staging.aroosi.app/api
          FIREBASE_STORAGE_BUCKET=
          GOOGLE_WEB_CLIENT_ID=
          GOOGLE_IOS_CLIENT_ID=
          GOOGLE_ANDROID_CLIENT_ID=
          EOF

      - name: Cache pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Ruby bundle
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile', 'ios/Gemfile', 'Gemfile.lock', 'ios/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: flutter pub get

      - name: Build debug APK
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

  build-ios:
    name: Build iOS IPA
    needs: quality
    if: github.event_name == 'push'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Generate GoogleService-Info.plist
        if: ${{ env.GOOGLESERVICE_INFO_PLIST_BASE64 != '' }}
        run: |
          python3 - <<'PY'
          import base64, os, pathlib

          data = os.environ.get('GOOGLESERVICE_INFO_PLIST_BASE64', '').strip()
          if not data:
              raise SystemExit('GOOGLESERVICE_INFO_PLIST_BASE64 is empty')

          plist_path = pathlib.Path('ios/Runner/GoogleService-Info.plist')
          plist_path.parent.mkdir(parents=True, exist_ok=True)
          plist_path.write_bytes(base64.b64decode(data))

          print(f'Wrote {plist_path} from GOOGLESERVICE_INFO_PLIST_BASE64 secret')
          PY

      - name: Create CI .env
        run: |
          cat <<'EOF' > .env
          ENVIRONMENT=staging
          API_BASE_URL=https://staging.aroosi.app/api
          FIREBASE_STORAGE_BUCKET=
          GOOGLE_WEB_CLIENT_ID=
          GOOGLE_IOS_CLIENT_ID=
          GOOGLE_ANDROID_CLIENT_ID=
          EOF

      - name: Cache pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Ruby bundle
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile', 'ios/Gemfile', 'Gemfile.lock', 'ios/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: flutter pub get

      - name: Install Ruby dependencies
        run: |
          gem install bundler -v '>=2.5.0'
          bundle config set --local path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Configure iOS signing assets
        env:
          IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          set -euo pipefail

          if [ -z "${IOS_CERT_BASE64:-}" ] || [ -z "${IOS_PROFILE_BASE64:-}" ]; then
            echo "iOS signing secrets are not configured." >&2
            exit 1
          fi

          CERT_PATH="$RUNNER_TEMP/dist.cer.p12"
          PROFILE_PATH="$RUNNER_TEMP/profile.mobileprovision"
          export CERT_PATH PROFILE_PATH

          python3 <<'PY'
          import base64, os, pathlib, sys, textwrap


          exec(textwrap.dedent('''
          def decode_to(path_env, output_path):
              data = os.environ.get(path_env, '').strip()
              if not data:
                  sys.exit(f"Environment variable {path_env} is missing")
              pathlib.Path(output_path).write_bytes(base64.b64decode(data))


          decode_to('IOS_CERT_BASE64', os.environ['CERT_PATH'])
          decode_to('IOS_PROFILE_BASE64', os.environ['PROFILE_PATH'])
          '''))
          PY

          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          KEYCHAIN_PASSWORD=$(openssl rand -hex 16)

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "${IOS_CERT_PASSWORD:-}" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed 's/^[ \t]*//;s/"//g')

          PROFILE_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i "$PROFILE_PATH" > "$PROFILE_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print:UUID' "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print:Name' "$PROFILE_PLIST")

          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_DIR"
          cp "$PROFILE_PATH" "$PROFILES_DIR/$PROFILE_UUID.mobileprovision"
          rm -f "$PROFILE_PLIST"

          echo "MATCH_KEYCHAIN=$KEYCHAIN_PATH" >> $GITHUB_ENV
          echo "MATCH_KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

      - name: Run Fastlane (TestFlight)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: ios
        run: bundle exec fastlane ios deploy_testflight

      - name: Show Transporter log
        if: always()
        run: |
          if [ -f ios/build/transporter.log ]; then
            echo '--- Transporter log start ---'
            cat ios/build/transporter.log
            echo '--- Transporter log end ---'
          else
            echo 'No transporter log generated.'
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/Runner.ipa
